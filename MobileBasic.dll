/*
 * ================================//
 * Интерпретатор языка JsMobileBasic
 * ~~~~~~~~~~by PROPHESSOR~~~~~~~~~~
 * ================================//
 */

/* global $Config */

'use strict';

//Графика

const JsMB = {
    $Mouse: {
        x: 0,
        y: 0,
        lcount: 0,
        rcount: 0
    },
    $Gel: {
        $Sprite: {}
    },
    $Font: {
        family: 'arial',
        size: '10'
    },
    $Element: {},
    $JsMobileBasic: {
        name: 'JsMobileBasic',
        version: 'Alpha 11',
        author: 'PROPHESSOR',
        url: 'http://vk.com/JsMobileBasic',
        Mobile: $Config.Mobile,
        Debug: true,
        canvas: typeof document !== 'undefined' ? document.getElementById('c') : null,
        graphics: false,
        supports: {
            document: typeof document !== 'undefined',
            window: typeof window !== 'undefined',
            ls: typeof localStorage !== 'undefined'
        }
    },

    PI: Math.PI,
    G: 9.8,
    RAD2DEG: 180 / this.PI,
    DEG2RAD: this.PI / 180,

    __preinit() {
        for (const i in this) {
            if (typeof this[i] === 'function') this[i] = this[i].bind(this);
        }
    },

    __init({
        canvas,
        div
    }) {
        if (typeof require !== "function") window.require = () => console.warn("Использование системных функций не поддерживается на Вашей платформе");

        const supports = this.$JsMobileBasic.supports;

        this.debug('#===== Включён режим отладки =====#', 'color:gray;');
        this.debug(this.$JsMobileBasic.name, 'background:gray;color:yellow;');
        this.debug("v. " + this.$JsMobileBasic.version, 'background:gray;color:yellow;');
        this.debug("by " + this.$JsMobileBasic.author, 'background:gray;color:yellow;');
        this.debug(this.$JsMobileBasic.url, 'background:gray;color:yellow;');

        // ======Инициализация рабочей среды======//
        this.debug('// ======Инициализация рабочей среды======//', 'color:gray;');
        // Чтение конфига
        if (typeof $Config === "undefined") {
            console.error('Не найден файл конфигурации!');
        }

        if ($Config.type === 'graphics') {

            this.$JsMobileBasic.graphics = true;
            this.debug('Используется графика!', 'background:black;color:yellow;');

            this.$JsMobileBasic.$style = document.createElement('style');
            this.$JsMobileBasic.$style.innerHTML = 'html{overflow: hidden;} body{margin:0;padding:0;}';
            document.head.appendChild(this.$JsMobileBasic.$style);

            this.c = canvas;
            //    this.$JsMobileBasic.canvas = this.c;
            this.ctx = this.c.getContext("2d");
            if ($Config.canvas_size[0] === '*' && $Config.canvas_size[1] === '*') {
                this.debug('Canvas растянут на весь экран', 'background:black;color:#00ff00;');
                $Config.canvas_size[2] ? this.debug('Вмещение включено') : this.debug('Вмещение выключено');
                this.c.height = window.innerHeight;
                this.c.width = window.innerWidth;
                if ($Config.canvas_size[2]) {
                    this.c.style = 'display:block; margin:0; padding:0; position:fixed; top:0px; left: 0px; width:100%; height:100%;';
                }
            } else {
                // this.debug(this.$Config.canvas_size);
                this.c.height = $Config.canvas_size[1];
                this.c.width = $Config.canvas_size[0];
            }
        } else {
            this.debug('Графика не используется!', 'background:black;color:yellow;');
            this.c = supports.window ? window : null;
            this.ctx = false;
            if (supports.document && document.getElementById('c'))
                document.body.removeChild(document.getElementById('c'));
        }

        if (supports.document) document.getElementsByTagName('title')[0].innerHTML = $Config.name;

        this.debug('Имя проекта: ' + $Config.name, 'background:brown;color:yellow;');

        this.$Player = [supports.document ? document.getElementById("player0") : null];

        this.debug('// ======Инициализация интерпретатора======//', 'color:gray;');

    },

    /** Задать текущий цвет
     * @param  {string} color - Свет в CSS формате
     */
    setColor(color) {
        this.ctx.fillStyle = color;
        this.ctx.strokeStyle = color;
        return this;
    },

    /** Задать толщину линий
     * @param  {number} width - Толщина
     */
    setLineWidth(width) {
        this.ctx.lineWidth = width;
        return this;
    },

    /** Рисует залитый прямоугольник
     * @param  {number} x - Координата X левого верхнего угла
     * @param  {number} y - Координата Y левого верхнего угла
     * @param  {number} w - Ширина
     * @param  {number} h - Высота
     */
    fillRect(x, y, w, h) {
        this.ctx.fillRect(x, y, w, h);
        return this;
    },

    /** Переключить полноэкранный режим
     * @param  {bool} mode - true - включить, false - отключить
     */
    fullScreen(mode) {
        if (this.$JsMobileBasic.supports.document) {
            if (mode) {
                document.documentElement.requestFullScreen();
            } else {
                document.cancelFullScreen();
            }
        } else {
            this.debug("Работа в полноэкранном режиме невозможна!");
            return false;
        }
    },

    /** Очищает экран
     */
    cls() {
        this.clearRect(0, 0, this.screenWidth(), this.screenHeight());
        document.getElementById('p').innerHTML = '';
        return this;
    },

    /** Заливает экран выбранным цветом
     * @param  {string} color - Цвет в CSS формате
     */
    fillScreen(color) {
        this.ctx.save();
        this.setColor(color);
        this.fillRect(0, 0, this.screenWidth(), this.screenHeight());
        this.ctx.restore();
        return this;
    },

    /** Рисует прямоугольник
     * @param  {number} x - Координата X левого верхнего угла
     * @param  {number} y - Координата Y левого верхнего угла
     * @param  {number} w - Ширина
     * @param  {number} h - Высота
     */
    drawRect(x, y, w, h) {
        this.ctx.strokeRect(x, y, w, h);
        return this;
    },

    /** Рисует точку по координатам (заливает пиксель)
     * @param  {number} x - X координата точки
     * @param  {number} y - Y координата точки
     */
    drawPlot(x, y) {
        this.fillRect(x, y, 1, 1);
        return this;
    },

    /** Очищяет прямоугольную область
     * @param  {number} x - Координата X левого верхнего угла
     * @param  {number} y - Координата Y левого верхнего угла
     * @param  {number} w - Ширина
     * @param  {number} h - Высота
     */
    clearRect(x, y, x1, y1) {
        this.ctx.clearRect(x, y, x1, y1);
        return this;
    },

    /** Рисует линию по 2 точкам
     * @param  {number} x1 - X 1 точки
     * @param  {number} y1 - Y 1 точки
     * @param  {number} x2 - X 2 точки
     * @param  {number} y2 - Y 2 точки
     */
    drawLine(x1, y1, x2, y2) {
        this.ctx.beginPath();
        this.ctx.moveTo(x1, y1);
        this.ctx.lineTo(x2, y2)
        this.ctx.stroke();
        return this;
    },

    /** Рисует проекцию паралелепипеда (через 2 соединенных прямоугольника)
     * @param  {number} x - XY левого верхнего угла
     * @param  {number} y - XY левого верхнего угла
     * @param  {number} w - ширина
     * @param  {number} h - высота
     * @param  {number} q - глубина
     */
    drawCube(x, y, w, h, q) {
        this.ctx.strokeRect(x, y, w, h);
        this.ctx.strokeRect(x + (q / Math.sqrt(2)), y + (q / Math.sqrt(2)), w, h);
        this.drawLine(x, y, x + (q / Math.sqrt(2)), y + (q / Math.sqrt(2)));
        this.drawLine(x + w, y, x + w + (q / Math.sqrt(2)), y + (q / Math.sqrt(2)));
        this.drawLine(x, y + h, x + (q / Math.sqrt(2)), y + h + (q / Math.sqrt(2)));
        this.drawLine(x + w, y + h, x + w + (q / Math.sqrt(2)), y + h + (q / Math.sqrt(2)));
        return this;
    },

    /** Рисует залитую окружность
     * @param  {number} x - X центра
     * @param  {number} y - Y центра
     * @param  {number} radius - радиус
     * @param  {number} startAngle=(15*Math.PI/7) - Угол начала
     * @param  {number} endAngle=(13*Math.PI/2) - Угол конца
     * @param  {bool} counterClockwise=false - По часовой стрелке?
     */
    drawArc(x, y, radius,
        startAngle = (15 * Math.PI / 7),
        endAngle = (13 * Math.PI / 2),
        counterClockwise = false) {
        this.ctx.beginPath();
        this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);
        this.ctx.stroke();
        return this;
    },

    /** Рисует залитую окружность
     * @param  {number} x - X центра
     * @param  {number} y - Y центра
     * @param  {number} radius - радиус
     * @param  {number} startAngle=(15*Math.PI/7) - Угол начала
     * @param  {number} endAngle=(13*Math.PI/2) - Угол конца
     * @param  {bool} counterClockwise=false - По часовой стрелке?
     */
    fillArc(x, y, radius,
        startAngle = (15 * Math.PI / 7),
        endAngle = (13 * Math.PI / 2),
        counterClockwise = false) {
        this.ctx.beginPath();
        this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);
        this.ctx.fill();
        return this;
    },

    /** Рисует залитый четырехугольник по четырем точкам
     * @param  {number} x1 - X 1 точки
     * @param  {number} y1 - Y 1 точки
     * @param  {number} x2 - X 2 точки
     * @param  {number} y2 - Y 2 точки
     * @param  {number} x3 - X 3 точки
     * @param  {number} y3 - Y 3 точки
     * @param  {number} x4 - X 4 точки
     * @param  {number} y4 - Y 4 точки
     */
    fillRect4(x1, y1, x2, y2, x3, y3, x4, y4) {
        this.ctx.beginPath();
        this.ctx.moveTo(x1, y1);
        this.ctx.lineTo(x2, y2);
        this.ctx.lineTo(x3, y3);
        this.ctx.lineTo(x4, y4);
        this.ctx.lineTo(x1, y1);
        this.ctx.closePath();
        this.ctx.fill();

        return this;
    },

    /** Рисует четырехугольник по четырем точкам
     * @param  {number} x1 - X 1 точки
     * @param  {number} y1 - Y 1 точки
     * @param  {number} x2 - X 2 точки
     * @param  {number} y2 - Y 2 точки
     * @param  {number} x3 - X 3 точки
     * @param  {number} y3 - Y 3 точки
     * @param  {number} x4 - X 4 точки
     * @param  {number} y4 - Y 4 точки
     */
    drawRect4(x1, y1, x2, y2, x3, y3, x4, y4) {
        this.ctx.beginPath();
        this.ctx.moveTo(x1, y1);
        this.ctx.lineTo(x2, y2);
        this.ctx.lineTo(x3, y3);
        this.ctx.lineTo(x4, y4);
        this.ctx.lineTo(x1, y1);
        this.ctx.closePath();
        this.ctx.stroke();
        this.ctx.fill();

        return this;
    },

    /** Рисует залитый триугольник по трем точкам
     * @param  {number} x1 - X 1 точки
     * @param  {number} y1 - Y 1 точки
     * @param  {number} x2 - X 2 точки
     * @param  {number} y2 - Y 2 точки
     * @param  {number} x3 - X 3 точки
     * @param  {number} y3 - Y 3 точки
     */
    fillTriangle(x1, y1, x2, y2, x3, y3) {
        this.ctx.beginPath();
        this.ctx.moveTo(x1, y1);
        this.ctx.lineTo(x2, y2);
        this.ctx.lineTo(x3, y3);
        this.ctx.lineTo(x1, y1);
        this.ctx.closePath();
        this.ctx.fill();

        return this;
    },

    /** Рисует n-угольник по точкам
     * @param  {array} array - Двумерный массив точек ([[x,y],[x1,y1],...])
     */
    drawNangle(array) {
        if (!(array && array.length)) {
            console.warn("Аргументом оператора drawNangle должен быть двумерный массив!");
            return this;
        }

        this.ctx.beginPath();
        for (let i = 0; i < array.length; i++) {
            if (i == 0) this.ctx.moveTo(array[i][0], array[i][1]);
            else this.ctx.lineTo(array[i][0], array[i][1]);
        }
        this.ctx.lineTo(array[0][0], array[0][0]);
        this.ctx.closePath();
        this.ctx.stroke();
        return this;
    },

    /** Рисует залитый n-угольник по точкам
     * @param  {array} array - Двумерный массив точек ([[x,y],[x1,y1],...])
     */
    fillNangle(array) {
        if (!(array && array.length)) {
            console.warn("Аргументом оператора fillNangle должен быть двумерный массив!");
            return this;
        }

        this.ctx.beginPath();
        for (let i = 0; i < array.length; i++) {
            if (i == 0) this.ctx.moveTo(array[i][0], array[i][1]);
            else this.ctx.lineTo(array[i][0], array[i][1]);
        }
        this.ctx.lineTo(array[0][0], array[0][0]);
        this.ctx.closePath();
        this.ctx.fill();
        return this;
    },

    /** Рисует триугольник по трем точкам
     * @param  {number} x1 - X 1 точки
     * @param  {number} y1 - Y 1 точки
     * @param  {number} x2 - X 2 точки
     * @param  {number} y2 - Y 2 точки
     * @param  {number} x3 - X 3 точки
     * @param  {number} y3 - Y 3 точки
     */
    drawTriangle(x1, y1, x2, y2, x3, y3) {
        this.ctx.beginPath();
        this.ctx.moveTo(x1, y1);
        this.ctx.lineTo(x2, y2);
        this.ctx.lineTo(x3, y3);
        this.ctx.lineTo(x1, y1);
        this.ctx.closePath();
        this.ctx.stroke();

        return this;
    },

    /**
     * @param  {string} text - Текст для отображения
     * @param  {number} x - X
     * @param  {number} y - Y
     */
    drawString(text, x, y) {
        this.ctx.fillText(text, x, y);
        return this;
    },

    /** В некоторых реализациях JsMB используется двойная буфферизация
     * repaint производит отрисовку на экран ранее произведенных действий
     * В стандартной реализации ничего не делает
     */
    repaint() {
        return this;
    },

    /** Задать размер шрифта
     * @param  {number} size - Размер
     */
    setFontSize(size) {
        this.ctx.font = size + "px " + this.$Font.family;
        this.$Font.size = size;
        return this;
    },

    /** Задать шрифт
     * @param  {string} family - Шрифт
     */
    setFont(family) {
        this.ctx.font = this.$Font.size + "px " + family;
        this.$Font.family = family;
        return this;
    },

    /** Создает линейный градиент
     * @param  {number} x - X координата левого верхнего угла
     * @param  {number} y - Y координата левого верхнего угла
     * @param  {number} x1 - X координата правого нижнего угла
     * @param  {number} y1 - Y координата правого нижнего угла
     */
    makeLinearGradient(x, y, x1, y1) {
        return this.ctx.createLinearGradient(x, y, x1, y1);
    },

    /** Создает радиальный (круговой) градиент
     * @param  {number} x - X координата левого верхнего угла
     * @param  {number} y - Y координата левого верхнего угла
     * @param  {number} r - Радиус внутреннего круга
     * @param  {number} x1 - X координата правого нижнего угла
     * @param  {number} y1 - Y координата правого нижнего угла
     * @param  {number} r1 - Радиус внешнего круга
     */
    makeRadialGradient(x, y, r, x1, y1, r1) {
        return this.ctx.createRadialGradient(x, y, r, x1, y1, r1);
    },

    /** Задать цвет градиенту
     * @param  {gradient} g - Градиент
     * @param  {number} pos - Позиция (0 - 1)
     * @param  {string} color - Цвет в CSS формате
     */
    setGradientColor(g, pos, color) {
        g.addColorStop(pos, color);
        return this;
    },

    //Конвертеры

    /** Цвет в rgb
     * @param  {number} red=0 - Значение красного цвета (0 - 255)
     * @param  {number} green=0 - Значение зеленого цвета (0 - 255)
     * @param  {number} blue=0 - Значение синего цвета (0 - 255)
     * @returns {string} "rgb(red, green, blue)"
     */
    rgb(red = 0, green = 0, blue = 0) {
        return "rgb(" + red + "," + green + "," + blue + ")";
    },

    /** Цвет в rgb
     * @param  {number} red=0 - Значение красного цвета (0 - 255)
     * @param  {number} green=0 - Значение зеленого цвета (0 - 255)
     * @param  {number} blue=0 - Значение синего цвета (0 - 255)
     * @param  {number} alpha=0 - Прозрачность (0 - 1)
     * @returns {string} "rgba(red, green, blue, alpha)"
     */
    rgba(red = 0, green = 0, blue = 0, alpha = 0) {
        return "rgba(" + red + "," + green + "," + blue + "," + alpha + ")";
    },

    //Гели/спрайты

    /** Загрузить гель в память
     * @param  {string} file - Файл (./,http,...)
     * @param  {string} name - Имя геля
     */
    gelLoad(file, name) {
        this.$Gel[name] = new Image();
        this.$Gel[name].src = file;
        return this;
    },

    /** [НЕ РЕАЛИЗОВАНО]
     * Переводит гель в спрайт
     * @param  {string} sprite - Имя спрайта
     * @param  {string} gel - Имя геля
     */
    spriteGel(sprite, gel) {
        console.warn('Внимание! Оператор spriteGel не работает!');
        return this;
    },

    /** Рисует гель по указанным координатам
     * @param  {string} name - Имя геля
     * @param  {number} x - X координата левого верхнего угла
     * @param  {number} y - Y координата левого верхнего угла
     */
    drawGel(name, x, y) {
        if (this.$Gel[name].resize == true) {
            this.ctx.drawImage(this.$Gel[name], x, y, this.$Gel[name].w, this.$Gel[name].h);
        } else {
            this.ctx.drawImage(this.$Gel[name], x, y);
        }
        return this;
    },

    /** [НЕ РЕАЛИЗОВАНО]
     * Рисует спрайт по указанным координатам
     * @param  {string} name - Имя спрайта
     * @param  {number} x - X координата левого верхнего угла
     * @param  {number} y - Y координата левого верхнего угла
     */
    drawSprite(name, x, y) {
        console.warn('Внимание! Оператор drawSprite не работает!');
        return false;
    },

    /** Задать размеры гелю (деформация)
     * @param  {string} name - Название геля
     * @param  {number} w - Ширина
     * @param  {number} h - Высота
     */
    gelSize(name, w, h) {
        this.$Gel[name].resize = true;
        this.$Gel[name].w = w;
        this.$Gel[name].h = h;
        return this;
    },

    /** Рисует фрагмент геля
     * @param  {string} name - Имя геля
     * @param  {number} fx - Координаты левого верхнего угла области
     * @param  {number} fy - Координаты левого верхнего угла области
     * @param  {number} fw - Ширина области
     * @param  {number} fh - Высота области
     * @param  {number} x - Координаты левого верхнего угла для рисования
     * @param  {number} y - Координаты левого верхнего угла для рисования
     * @param  {number} w=fw - ширина для рисования
     * @param  {number} h=fh - высота для рисования
     */
    drawGelFragment(name, fx, fy, fw, fh, x, y, w = fw, h = fh) { //TODO: Проверить
        this.ctx.drawImage(this.$Gel[name], fx, fy, fw, fh, x, y, w, h);
        return this;
    },

    /** Создает текстуру из геля
     * @param  {string} gelname - Имя геля
     * @param  {string} repeat='repeat' - Повторение (repeat/no-repeat)
     */
    makeTexture(gelname, repeat = 'repeat') { //repeat/no-repeat
        return this.ctx.createPattern(this.$Gel[gelname], repeat);
    },


    //Ввод

    /** Окно ввода данных
     * @param  {string} text - Текст заголовка окна
     * @param  {string} [def] - Текст по умолчанию
     */
    input(text, def) {
        return prompt(text, def);
    },


    //Вывод

    /** Вывести текст на экран
     */
    println(...text) {
        const p = document.getElementById('p');
        p.style = "position:fixed;top:0px;left:0px;width:100%;height:100%;-webkit-user-select:none;    pointer-events: none;";
        p.innerHTML += text + "<br/>";
        return this;
    },

    //Звук

    /** Играть звук
     * @param  {string} file - Файл звука 
     * @param  {bool} loop - Зациклить?
     * @param  {string} channel=0 - Канал
     */
    playSound(file, loop = false, channel = 0) {
        if (!this.$Player[0]) {
            console.warn("На вашей платформе не поддерживается воспроизведение звука!");
            return this;
        }
        if (this.$Player[channel] === undefined) {
            const p = document.createElement('audio');
            p.id = "player" + channel;
            document.getElementById('audio').appendChild(p);
            this.$Player[channel] = document.getElementById('player' + channel);
        }
        this.$Player[channel].setAttribute("src", file);

        this.$Player[channel].setAttribute('loop', Number(loop));

        this.$Player[channel].play();
        return this;
    },

    /** Приостановить воспроизведение звука на канале
     * @param  {number} channel=-1 - Канал (-1 для остановки на всех каналах)
     */
    pauseSound(channel = -1) {
        if (!this.$Player[0]) return this;
        if (channel == -1) {
            for (const i in this.$Player) {
                this.$Player[i].pause();
            }
            return this;
        }
        if (this.$Player[channel] === undefined) {
            this.debug("На данном канале нет плеера");
            return false;
        }
        this.$Player[channel].pause();
        return this;
    },

    //Matheматика

    /** Возвращает квадратный корень из числа
     * @param  {number} number - Число
     */
    sqrt: Math.sqrt,

    /** Возвращает случайное число
     * @param  {number} min - От
     * @param  {number} max - До
     */
    random: (min, max) => Math.floor(Math.random() * max - min) + min,

    /** Возвращает синус угла
     * @param  {number} angle - Угол в радианах
     */
    sin: Math.sin,

    /** Возвращает косинус угла
     * @param  {number} angle - Угол в радианах
     */
    cos: Math.cos,

    /** Возвращает тангенс угла
     * @param  {number} angle - Угол в радианах
     */
    tan: Math.tan,

    /** Возвращает котангенс угла
     * @param  {number} angle - Угол в радианах
     */
    ctg: (angle) => 1 / Math.tan(angle),

    /** Возвращает арксинус угла (в радианах)
     * @param  {number} angle - Угол в радианах
     */
    asin: Math.asin,

    /** Возвращает арккосинус угла (в радианах)
     * @param  {number} angle - Угол в радианах
     */
    acos: Math.acos,

    /** Возвращает арктангенс угла (в радианах)
     * @param  {number} angle - Угол в радианах
     */
    atan: Math.atan,

    /** Возвращает остаток от деления 2-х чисел
     * @param  {number} x - Делимое
     * @param  {number} y - Делитель
     */
    mod: (x, y) => x % y,

    /** Возвращает модуль числа
     * @param  {number} number - Число
     */
    abs: Math.abs,

    /** Возводит число в степень
     * @param  {number} number - Число
     * @param  {number} power - Степень
     */
    pow: Math.pow,

    /** Возвращает натуральный логарифм от числа
     * @param  {number} number - Число
     */
    ln: Math.log,

    /** Возвращает число e в степени
     * @param  {number} power - Степень
     */
    exp: Math.exp,

    /** Возвращает ограниченное значение переменной
     * @param  {number} variable - Начальное значение
     * @param  {number} min - Минимум (нижняя граница)
     * @param  {number} max - Максимум (верхняя граница)
     */
    limit: (variable, min, max) => variable <= min ? min : max,

    /** Возвращает минимальное значение из аргументов
     */
    min: Math.min,

    /** Возвращает максимальное значение из аргументов
     */
    max: Math.max,

    /** Переводит градусы в радианы
     * @param  {number} deg - Значение в градусах
     */
    rad: (deg) => {
        if (deg === 90) return this.PI / 2;
        if (deg === 270) return 3 * this.PI / 2;
        return deg * this.DEG2RAD;
    },

    /** Переводит радианы в градусы
     * @param  {number} rad - Значение в градусах
     */
    deg: (rad) => rad * this.RAD2DEG,

    //Строковые функции


    /** Возвращает длину строки/массива
     * @param  {string} str - Строка/массив
     */
    len: (str) => str.length,

    /** Переводит число/значение в строку
     * @param  {*} num - Число или другое значение
     */
    str: (num) => String(num),

    /** Переводит строку в число (или возвращает NaN, если это невозможно)
     * @param  {string} str - Строка с числом
     */
    val: (str) => Number(str),

    /** Переводит строку в число (или возвращает NaN, если это невозможно)
     * Лучше использовать val
     * @param  {string} str - Строка с числом
     */
    int: (str) => parseInt(str),

    /** Переводит строку в число с плавающей точкой (или возвращает NaN, если это невозможно)
     * @param  {string} str - Строка с числом
     */
    float: (str) => parseFloat(str),

    /** Приводит все символы строки в ВЕРХНИЙ РЕГИСТР
     * @param  {string} str - Строка
     */
    upper: (str) => str.toUpperCase(),

    /** Приводит все символы строки в нижний регистр
     * @param  {string} str - Строка
     */
    lower: (str) => str.toLowerCase(),

    /** Возвращает часть строки
     * @param  {string} str - Строка
     * @param  {number} pos - Начало выделения
     * @param  {number} len - Длина выделения
     */
    mid: (str, pos, len) => str.substr(pos, len),

    /** Возвращает символ по его коду. Можно передать несколько кодов
     * @param  {number} code - Код(ы) символа
     */
    chr: String.fromCharCode, //code to string

    /** Возвращает код символа
     * @param  {string} str - Строка
     * @param  {number} [pos=0] - Позиция символа в строке
     */
    asc: (str, pos = 0) => str.charCodeAt(pos), //string to code

    /** Разбивает строку и возвращает массив частей
     * @param  {string} str - Строка
     * @param  {string} char - Символ/регулярное выражение, по которому разбивать
     */
    split: (str, char) => str.split(char),

    /** Возвращает строку с замененной частью
     * @param  {string} str - Строка
     * @param  {string} reg - Строка/регулярное выражение для замены
     * @param  {string} to - На что менять
     * @param  {bool} [all=false] - Заменять все включения
     */
    replace: (str, reg, to, all = false) => all ? str.replace(new RegExp(reg, 'g')) : str.replace(reg, to),

    //Работа с локальными данными

    /** Сохранить данные в хранилище
     * @param  {string} name - Название ячейки
     * @param  {*} _data - Данные
     */
    localSaveData(name, _data) {
        const data = typeof (_data) == "object" ? this.toJSON(_data) : _data;
        window.localStorage.setItem(name, data);
        return this;
    },

    /** Получить данные из хранилища
     * @param  {string} name - Название ячейки
     */
    localReadData(name) {
        try {
            return this.parseJSON(window.localStorage.getItem(name));
        } catch (e) {
            return window.localStorage.getItem(name);
        }
    },

    /** Возвращает объект из JSON строки
     * @param  {string} json - JSON строка
     */
    parseJSON: (json) => {
        try {
            return JSON.parse(json);
        } catch (e) {
            return null;
        }
    },

    /** Возвращает JSON строку из объекта
     * @param  {object} object - Объект
     * @param  {function} [f=null] - Дополнительный обработчик
     * @param  {number} [s=4] - Отступ
     */
    toJSON: (object, f = null, s = 4) => JSON.stringify(object, f, 4),

    /** Возвращает PSON строку из объекта (с функциями)
     * @param  {object} object - Объект
     * @param  {number} [s=4] - Отступ
     */
    toPSON: (object, s = 4) => JSON.stringify(object, (a, b) => typeof b === 'function' ? '' + b : b, s),

    //Работа с модулями

    /** Подключает модуль/файл
     * @param  {string} file - Имя/адрес файла
     */
    include: (file) => {
        const e = document.createElement("script");
        e.src = file;
        e.type = "text/javascript";
        document.getElementById('modules').appendChild(e);
        return this;
    },

    getModuleName(ID) {
        console.warn('This function is deprecated!');
        return ID.name;
    },

    getModuleAuthor(ID) {
        console.warn('This function is deprecated!');
        return ID.author;
    },

    getModuleDescription(ID) {
        console.warn('This function is deprecated!');
        return ID.description;
    },

    getModuleUrl(ID) {
        console.warn('This function is deprecated!');
        return ID.url;
    },

    getModuleVersion(ID) {
        console.warn('This function is deprecated!');
        return ID.version;
    },

    //Получение значений

    /** Возвращает ширину экрана
     */
    screenWidth() {
        if (this.$JsMobileBasic.graphics || this.$JsMobileBasic.canvas) {
            return this.$JsMobileBasic.canvas.width;
        } else {
            return window.innerWidth;
        }
    },

    /** Возвращает высоту экрана
     */
    screenHeight() {
        if (this.$JsMobileBasic.graphics || this.$JsMobileBasic.canvas) {
            return this.$JsMobileBasic.canvas.height;
        } else {
            return window.innerHeight;
        }
    },

    /** Возвращает X координату мыши в данный момент
     */
    getMouseX() {
        return this.$Mouse.x;
    },

    /** Возвращает Y координату мыши в данный момент
     */
    getMouseY() {
        return this.$Mouse.y;
    },

    /** Возвращает количество кликов с момента запуска программы
     */
    getLeftClicksCount() {
        return this.$Mouse.lcount;
    },

    /** Возвращает количество правых кликов с момента запуска программы
     */
    getRightClicksCount() {
        return this.$Mouse.rcount;
    },


    //Техническое

    /** Логирование
     * @param  {*} - Данные
     */
    log(...text) {
        console.log(...text);
        return this;
    },

    /** Вывести сообщение для отладки
     * @param  {string} text - Сообщение
     * @param  {string} [style] - Оформление сообщения (CSS)
     */
    debug(text, style = 'background: black; color: red;') {
        if ($Config.Debug_Mode) {
            if (!this.$JsMobileBasic.Mobile)
                console.log('%c ' + text, style);
            else
                alert(style);
        }
        return {
            next: this.debug
        };
    },

    /** Закрыть программу
     */
    exit() {
        window.close();
        return this;
    },

    addElement(name, type) {
        this.$Element[name] = document.createElement(type);
        document.getElementById('includeHTML').appendChild(name)
        return this.$Element[name];
    },

    //Обработчики событий
    _eventListeners() {
        // window.onClick =
        //     window.onMouseDown = window.onMouseMove = window.onMouseUp = window.onKeyDown = window.onKeyPress = window.onKeyUp = window.onRightClick = window.Loop = () => {};
        this.c.addEventListener('mousemove', (event) => {
            this.$Mouse.x = event.offsetX;
            this.$Mouse.y = event.offsetY;
            if (typeof onMouseMove === 'function')
                onMouseMove(event.offsetX, event.offsetY, event);
        }, false);
        this.c.addEventListener('click', (event) => {
            this.$Mouse.lcount++;
            if (typeof onClick === 'function')
                onClick(event.offsetX, event.offsetY, event);
        }, false);
        this.c.addEventListener('mousedown', (event) => {
            if (typeof onMouseDown === 'function')
                onMouseDown(event.offsetX, event.offsetY, event);
        }, false);
        this.c.addEventListener('mouseup', (event) => {
            if (typeof onMouseUp === 'function')
                onMouseUp(event.offsetX, event.offsetY, event);
        }, false);
        this.c.addEventListener('contextmenu', (event) => {
            this.$Mouse.rcount++;
            if (typeof onRightClick === 'function')
                onRightClick(event.offsetX, event.offsetY, event);
        }, false);
        window.addEventListener('keypress', (event) => {
            if (typeof onKeyPress === 'function')
                onKeyPress(event.keyCode, event);
        }, false);

        window.addEventListener('keydown', (event) => {
            if (typeof onKeyDown === 'function')
                onKeyDown(event.keyCode, event);
        }, false);

        window.addEventListener('keyup', (event) => {
            if (typeof onKeyUp === 'function')
                onKeyUp(event.keyCode, event);
        }, false);
    }
}
// ======Прочее======//

JsMB.__preinit();
if (typeof window !== 'undefined' && typeof document !== 'undefined') {
    Object.assign(window, JsMB);
    JsMB.__init({
        canvas: document.getElementById('c'),
        div: document.getElementById('p')
    });
}

if (typeof module === 'object') module.exports = JsMB;

JsMB.debug('// ======Инициализация завершена======//', 'background:black;color: #00ff00;');

if (typeof window !== 'undefined') window.addEventListener('load', function () {
    JsMB._eventListeners();
    if (typeof Main === "function") Main(); //eslint-disable-line
    else throw new Error("В файле Autorun.bas должен быть хук Main()!");
    if (typeof Loop === "function") {
        if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = (window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (fnc) {
                return window.setTimeout(fnc, 1000 / 60);
            });
        }

        function $Loop() {
            window.requestAnimationFrame($Loop);
            Loop();
        }
        $Loop();
    }
});

JsMB.debug('// ======Подключение модулей/библиотек======//', 'color:gray;');