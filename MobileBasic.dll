/*
 * ================================//
 * Интерпретатор языка JsMobileBasic
 * ~~~~~~~~~~by PROPHESSOR~~~~~~~~~~
 * ================================//
 */

/* global $Config */

'use strict';

const $JsMobileBasic = {
    name: 'JsMobileBasic',
    version: 'Alpha 11',
    author: 'PROPHESSOR',
    url: 'http://vk.com/JsMobileBasic',
    Mobile: $Config.Mobile,
    Debug: true,
    canvas: document.getElementById('c'),
    graphic: false
}

//Графика

const JsMB = {
    $Mouse: {
        x: 0,
        y: 0,
        lcount: 0,
        rcount: 0
    },
    $Gel: {
        $Sprite: {}
    },
    $Font: {
        family: 'arial',
        size: '10'
    },
    $Element: {},
    $Menu: {
        $Bar: {}
    },

    PI: Math.PI,
    G: 9.8,
    RAD2DEG: 180 / this.PI,
    DEG2RAD: this.PI / 180,

    __preinit(){
        for(const i in this) {
            if(typeof this[i] === 'function') this[i] = this[i].bind(this);
        }
    },

    __init() {
        if (typeof require !== "function") window.require = () => console.warn("Использование системных функций не поддерживается на Вашей платформе");

        let $NW, $Path, $Proc;
        if (typeof require === "function" && require("nw.gui")) {
            $NW = require("nw.gui");
        } else $NW = null;

        debug('#===== Включён режим отладки =====#', 'color:gray;');
        debug($JsMobileBasic.name, 'background:gray;color:yellow;');
        debug("v. " + $JsMobileBasic.version, 'background:gray;color:yellow;');
        debug("by " + $JsMobileBasic.author, 'background:gray;color:yellow;');
        debug($JsMobileBasic.url, 'background:gray;color:yellow;');

        // ======Инициализация рабочей среды======//
        debug('// ======Инициализация рабочей среды======//', 'color:gray;');
        // Чтение конфига
        if (typeof $Config == "undefined") {
            console.error('Не найдена конфигурация в файле index.html!');
        }

        if ($Config.type == 'graphic') {
            $JsMobileBasic.graphic = true;
            debug('Используется графика!', 'background:black;color:yellow;');

            $JsMobileBasic.$style = document.createElement('style');
            $JsMobileBasic.$style.innerHTML = 'html{overflow: hidden;} body{margin:0;padding:0;}';
            document.head.appendChild($JsMobileBasic.$style);

            this.c = document.getElementById("c");
            //    $JsMobileBasic.canvas = this.c;
            this.ctx = this.c.getContext("2d");
            if ($Config.canvas_size[0] == '*' && $Config.canvas_size[1] == '*') {
                debug('Canvas растянут на весь экран', 'background:black;color:#00ff00;');
                if (!$JsMobileBasic.Mobile) {
                    $Config.canvas_size[2] ? debug('Вмещение включено') : debug('Вмещение выключено');
                }
                this.c.height = window.innerHeight;
                this.c.width = window.innerWidth;
                if ($Config.canvas_size[2]) {
                    this.c.style = 'display:block; margin:0; padding:0; position:fixed; top:0px; left: 0px; width:100%; height:100%;';
                }
            } else {
                // debug($Config.canvas_size);
                this.c.height = $Config.canvas_size[1];
                this.c.width = $Config.canvas_size[0];
            }
        } else {
            debug('Графика не используется!', 'background:black;color:yellow;');
            this.c = window;
            this.ctx = false;
            if (document.getElementById('c') != undefined) document.body.removeChild(document.getElementById('c'));
        }

        document.getElementsByTagName('title')[0].innerHTML = $Config.name;
        debug('Имя проекта: ' + $Config.name, 'background:brown;color:yellow;');

        var $Player = [document.getElementById("player0")];

        debug('// ======Инициализация интерпретатора======//', 'color:gray;');

    },

    setColor(color) {
        this.ctx.fillStyle = color;
        this.ctx.strokeStyle = color;
        return this;
    },

    setLineWidth(width) {
        this.ctx.lineWidth = width;
        return this;
    },

    fillRect(x, y, x1, y1) {
        this.ctx.fillRect(x, y, x1, y1);
        return this;
    },

    cls() {
        clearRect(0, 0, screenWidth(), screenHeight());
        document.getElementById('p').innerHTML = '';
        return this;
    },

    fillScreen(color) {
        this.ctx.save();
        setColor(color);
        fillRect(0, 0, screenWidth(), screenHeight());
        this.ctx.restore();
        return this;
    },

    drawRect(x, y, x1, y1) {
        this.ctx.strokeRect(x, y, x1, y1);
        return this;
    },

    drawPlot(x, y) {
        this.ctx.save();
        setLineWidth(1);
        drawLine(x, y, x + 1, y + 1);
        this.ctx.restore()
        return this;
    },

    clearRect(x, y, x1, y1) {
        this.ctx.clearRect(x, y, x1, y1);
        return this;
    },

    drawLine(x, y, x1, y1) {
        this.ctx.beginPath();
        this.ctx.moveTo(x, y);
        this.ctx.lineTo(x1, y1)
        this.ctx.stroke();
        return this;
    },

    drawCube(x, y, x1, y1, q) {
        this.ctx.strokeRect(x, y, x1, y1);
        this.ctx.strokeRect(x + (q / Math.sqrt(2)), y + (q / Math.sqrt(2)), x1, y1);
        drawLine(x, y, x + (q / Math.sqrt(2)), y + (q / Math.sqrt(2)));
        drawLine(x + x1, y, x + x1 + (q / Math.sqrt(2)), y + (q / Math.sqrt(2)));
        drawLine(x, y + y1, x + (q / Math.sqrt(2)), y + y1 + (q / Math.sqrt(2)));
        drawLine(x + x1, y + y1, x + x1 + (q / Math.sqrt(2)), y + y1 + (q / Math.sqrt(2)));
        return this;
    },

    drawArc(x, y, radius,
        startAngle = (15 * Math.PI / 7),
        endAngle = (13 * Math.PI / 2),
        counterClockwise = false) {
        this.ctx.beginPath();
        this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);
        this.ctx.stroke();
        return this;
    },

    fillArc(x, y, radius,
        startAngle = (15 * Math.PI / 7),
        endAngle = (13 * Math.PI / 2),
        counterClockwise = false) {
        this.ctx.beginPath();
        this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);
        this.ctx.fill();
        return this;
    },

    fillRect4(x, y, x1, y1, x2, y2, x3, y3) {
        var arr = [
            [x, y],
            [x1, y1],
            [x2, y2],
            [x3, y3]
        ];
        this.ctx.beginPath();
        for (var i = 0; i < arr.length; i++) {
            if (i == 0) this.ctx.moveTo(arr[i][0], arr[i][1]);
            else this.ctx.lineTo(arr[i][0], arr[i][1]);
        }
        this.ctx.fill();
        return this;
    },

    drawRect4(x, y, x1, y1, x2, y2, x3, y3) {
        var arr = [
            [x, y],
            [x1, y1],
            [x2, y2],
            [x3, y3]
        ];
        this.ctx.beginPath();
        for (var i = 0; i < arr.length; i++) {
            if (i == 0) this.ctx.moveTo(arr[i][0], arr[i][1]);
            else this.ctx.lineTo(arr[i][0], arr[i][1]);
        }
        this.ctx.stroke();
        return this;
    },

    fillTriangle(x, y, x1, y1, x2, y2) {
        var arr = [
            [x, y],
            [x1, y1],
            [x2, y2]
        ];
        this.ctx.beginPath();
        for (var i = 0; i < arr.length; i++) {
            if (i == 0) this.ctx.moveTo(arr[i][0], arr[i][1]);
            else this.ctx.lineTo(arr[i][0], arr[i][1]);
        }
        this.ctx.fill();
        return this;
    },

    drawTriangle(x, y, x1, y1, x2, y2) {
        var arr = [
            [x, y],
            [x1, y1],
            [x2, y2]
        ];
        this.ctx.beginPath();
        for (var i = 0; i < arr.length; i++) {
            if (i == 0) this.ctx.moveTo(arr[i][0], arr[i][1]);
            else this.ctx.lineTo(arr[i][0], arr[i][1]);
        }
        this.ctx.stroke();
        return this;
    },

    drawString(text, x, y) {
        this.ctx.fillText(text, x, y);
        return this;
    },

    setFontSize(size) {
        this.ctx.font = size + "px " + $Font.family;
        $Font.size = size;
        return this;
    },

    setFont(family) {
        this.ctx.font = $Font.size + "px " + family;
        $Font.family = family;
        return this;
    },

    makeLinearGradient(x, y, x1, y1) {
        return this.ctx.createLinearGradient(x, y, x1, y1);
    },

    makeRadialGradient(x, y, r, x1, y1, r1) {
        return this.ctx.createRadialGradient(x, y, r, x1, y1, r1);
    },

    setGradientColor(g, num, color) {
        g.addColorStop(num, color);
        return this;
    },

    //Конвертеры

    rgb(red = 0, green = 0, blue = 0) {
        return "rgb(" + red + "," + green + "," + blue + ")";
    },

    rgba(red = 0, green = 0, blue = 0, alpha = 0) {
        return "rgba(" + red + "," + green + "," + blue + "," + alpha + ")";
    },

    //Гели/спрайты

    gelLoad(file, name) {
        $Gel[name] = new Image();
        $Gel[name].src = file;
        return this;
    },

    spriteGel(file, name) {
        // $Gel.$Sprite[name] = new Sprite();
        // $Gel.$Sprite[name].src = file;
        debug('Внимание! Функция spriteGel работает некорректно! Обновитесь до последней версии!');
        return false;
        //    var this.c = new Sprite();

    },

    drawGel(name, x, y) {
        if ($Gel[name].resize == true) {
            this.ctx.drawImage($Gel[name], x, y, $Gel[name].w, $Gel[name].h);
        } else {
            this.ctx.drawImage($Gel[name], x, y);
        }
        return this;
    },

    drawSprite(name, x, y) {
        // this.ctx.drawImage($Gel[name],x,y);
        return false;
    },

    gelSize(name, w, h) {
        $Gel[name].resize = true;
        $Gel[name].w = w;
        $Gel[name].h = h;
        return this;
    },

    drawGelFragment(name, fx, fy, fw, fh, x, y, w = fw, h = fh) { //TODO: Проверить
        this.ctx.drawImage($Gel[name], fx, fy, fw, fh, x, y, w, h);
        return this;
    },

    makeTexture(gelname, repeat = 'repeat') { //repeat/no-repeat
        return this.ctx.createPattern($Gel[gelname], repeat);
    },


    //Ввод

    input(text) {
        return prompt(text);
    },


    //Вывод


    println(...text) {
        var p = document.getElementById('p');
        p.style = "position:fixed;top:0px;left:0px;width:100%;height:100%;-webkit-user-select:none;    pointer-events: none;";
        p.innerHTML += text + "<br/>";
        return this;
    },

    //Звук

    playSound(file, loop, channel = 0) {
        if ($Player[channel] === undefined) {
            var p = document.createElement('audio');
            p.id = "player" + channel;
            document.getElementById('audio').appendChild(p);
            $Player[channel] = document.getElementById('player' + channel);
        }
        $Player[channel].setAttribute("src", file);
        if (!loop) {
            $Player[channel].setAttribute('loop', '0');
            $Player[channel].play();
        } else {
            $Player[channel].setAttribute('loop', '1');
            $Player[channel].play();
        }
        return this;
    },

    pauseSound(channel = 0) {
        if (channel == -1) {
            for (var i in $Player) {
                $Player[i].pause();
            }
            return this;
        }
        if ($Player[channel] === undefined) {
            debug("На данном канале нет плеера");
            return false;
        }
        $Player[channel].pause();
        return this;
    },

    //Matheматика

    sqrt: Math.sqrt,

    random: (a, b) => Math.floor(Math.random() * b - a) + a,

    sin: Math.sin,

    cos: Math.cos,

    tan: Math.tan,

    ctg: (x) => 1 / Math.tan(x),

    asin: Math.asin,

    acos: Math.acos,

    atan: Math.atan,

    mod: (x, y) => x % y,

    abs: Math.abs,

    pow: Math.pow,

    ln: Math.log,

    exp: Math.exp,

    limit: (variable, a, b) => variable <= a ? a : b,

    min: Math.min,
    max: Math.max,

    rad: (deg) => {
        if (deg === 90) return PI / 2;
        if (deg === 270) return 3 * PI / 2;
        return deg * DEG2RAD;
    },

    deg: (rad) => rad * RAD2DEG,

    //Строковые функции
    len: (str) => str.length,

    str: (num) => num.toString(),

    val: (str) => Number(str),

    int: (str) => Number(str),

    upper: (str) => str.toUpperCase(),

    lower: (str) => str.toLowerCase(),

    mid: (str, pos, len) => str.substr(pos, len),

    chr: (code) => String.fromCharCode(code), //code to string

    asc: (str) => str.charCode, //string to code

    split: (str, char) => str.split(char),

    replace: (str, reg, to) => str.replace(reg, to),

    float: (str) => parseFloat(str),

    //Работа с локальными данными

    localSaveData(name, _data) {
        const data = typeof (_data) == "object" ? toJSON(_data) : _data;
        window.localStorage.setItem(name, data);
        return this;
    },

    localReadData(name) {
        try {
            return parseJSON(window.localStorage.getItem(name));
        } catch (e) {
            return window.localStorage.getItem(name);
        }
    },

    parseJSON: (json) => {
        try {
            return JSON.parse(json);
        } catch (e) {
            return null;
        }
    },

    toJSON: (object, f = null, s = 4) => JSON.stringify(object, f, 4),

    toPSON: (object, s) => JSON.stringify(object, (a,b)=>typeof b==='function'?''+b:b, s),

    //Работа с NW

    //Контекстное меню
    menuAdd(name, title, onClick, type, fortype) {
        if ($NW) {
            if ($Menu[name] == undefined) {
                $Menu[name] = new $NW.Menu();
            }
            switch (type) {
                case undefined:
                    $Menu[name].append(new $NW.MenuItem({
                        label: title,
                        click: onClick
                    }));
                    break;
                case 'subMenu':
                    $Menu[name].append(new $NW.MenuItem({
                        label: title,
                        submenu: fortype
                    }));
                    break;
                case 'checkbox':
                    $Menu[name].append(new $NW.MenuItem({
                        label: title,
                        type: 'checkbox',
                        click: onClick
                    }));
                    break;
            }
            return this;
        } else {
            debug('Создание меню невозможно!');
            return false;
        }
    },

    menuShow(name, x, y) {
        if ($NW) {
            $Menu[name].popup(x, y);
            return this;
        } else {
            debug('Отображение меню невозможно!');
            return false;
        }
    },

    menuAddSeparator(name) {
        if ($NW) {
            if ($Menu[name] == undefined) {
                $Menu[name] = new $NW.Menu();
            }
            $Menu[name].append(new $NW.MenuItem({
                type: 'separator'
            }));
            return this;
        } else {
            debug('Создание меню невозможно!');
            return false;
        }
    },

    //Menu bar

    menuBarAdd(name, title, subMenu) {
        if ($NW) {
            if ($Menu.$Bar[name] == undefined) {
                $Menu.$Bar[name] = new $NW.Menu({
                    type: 'menubar',
                    title: title
                });
            }
            $Menu.$Bar[name].append(new $NW.MenuItem({
                label: title,
                submenu: $Menu[subMenu]
            }));
            return this;
        } else {
            debug('Создание меню невозможно!');
            return false;
        }
    },

    menuBarShow(name) {
        if ($NW) {
            $NW.Window.get().menu = $Menu.$Bar[name];
            return this;
        } else {
            debug('Отображение меню невозможно!');
            return false;
        }
    },


    //clipboard

    getClipboard(type = 'text') {
        if ($NW) {
            var clipboard = $NW.Clipboard.get();
            return clipboard.get(type);
        } else {
            debug('Работа с буфером обмена невозможна!');
            return false;
        }
    },

    setClipboard(value, type = 'text') {
        if ($NW) {
            var clipboard = $NW.Clipboard.get();
            clipboard.set(value, type);
            return this;
        } else {
            debug('Работа с буфером обмена невозможна!');
            return false;
        }
    },

    clearClipboard() {
        if ($NW) {
            var clipboard = $NW.Clipboard.get();
            clipboard.clear();
            return this;
        } else {
            debug('Работа с буфером обмена невозможна!');
            return false;
        }
    },

    //tray

    menuTrayAdd(name, title, icon, menu) {
        if ($NW) {
            var tray = new $NW.Tray({
                title: title,
                icon: icon,
                alticon: icon
            });
            tray.menu = $Menu[menu];
            return this;
        } else {
            debug('Работа с треем невозможна!');
            return false;
        }
    },

    //Процессы

    // exec(target) { //TODO: ->$Proc.js
    //     $Proc.execSync(target);
    //     return this;
    // }

    // execFile(file, keys = []) { //TODO: ->$Proc.js
    //     var proc = $Proc.execFile(file, keys, (error, stdout, stderr) => {
    //         if (error) {
    //             debug("Ошибка при работе с процессом: " + error);
    //         }

    //         return stdout;
    //     });
    // }
    //Работа с модулями
    include: (file) => {
        const e = document.createElement("script");
        e.src = file;
        e.type = "text/javascript";
        document.getElementById('modules').appendChild(e);
        return this;
    },

    getModuleName(ID) {
        return ID.name;
    },

    getModuleAuthor(ID) {
        return ID.author;
    },

    getModuleDescription(ID) {
        return ID.description;
    },

    getModuleUrl(ID) {
        return ID.url;
    },

    getModuleVersion(ID) {
        return ID.version;
    },

    //Получение значений

    screenWidth() {
        if ($JsMobileBasic.graphic) {
            return $JsMobileBasic.canvas.width;
        } else {
            return window.innerWidth;
        }
    },

    screenHeight() {
        if ($JsMobileBasic.graphic) {
            return $JsMobileBasic.canvas.height;
        } else {
            return window.innerHeight;
        }
    },

    getMouseX() {
        return $Mouse.x;
    },

    getMouseY() {
        return $Mouse.y;
    },

    getLeftClicksCount() {
        return $Mouse.lcount;
    },

    getRightClicksCount() {
        return $Mouse.rcount;
    },


    //Техническое

    log(text) {
        console.log(text);
        return this;
    },

    debug(text, style = 'background: black; color: red;') {
        if ($Config.Debug_Mode) {
            if (!$JsMobileBasic.Mobile)
                console.log('%c ' + text, style);
            else
                alert(style);
        }
        return {
            next: debug
        };
    },

    exit() {
        window.close();
        return this;
    },

    fullScreen(mode) {
        if ($NW) {
            if (mode) {
                var tmp = $NW.Window.get();
                tmp.enterFullscreen();
            } else {
                var tmp = $NW.Window.get();
                tmp.leaveFullscreen();
            }
        } else {
            debug("Работа с процессами невозможна!");
            return false;
        }
    },

    addElement(name, type) {
        $Element[name] = document.createElement(type);
        document.getElementById('includeHTML').appendChild(name)
        return $Element[name];
    },

    //Обработчики событий
    _eventListeners() {
        // window.onClick =
        //     window.onMouseDown = window.onMouseMove = window.onMouseUp = window.onKeyDown = window.onKeyPress = window.onKeyUp = window.onRightClick = window.Loop = () => {};
        this.c.addEventListener('mousemove', function (event) {
            $Mouse.x = event.offsetX;
            $Mouse.y = event.offsetY;
            if (typeof onMouseMove === 'function')
                onMouseMove(event.offsetX, event.offsetY, event);
        }, false);
        this.c.addEventListener('click', function (event) {
            $Mouse.lcount++;
            if (typeof onClick === 'function')
                onClick(event.offsetX, event.offsetY, event);
        }, false);
        this.c.addEventListener('mousedown', function (event) {
            if (typeof onMouseDown === 'function')
                onMouseDown(event.offsetX, event.offsetY, event);
        }, false);
        this.c.addEventListener('mouseup', function (event) {
            if (typeof onMouseUp === 'function')
                onMouseUp(event.offsetX, event.offsetY, event);
        }, false);
        this.c.addEventListener('contextmenu', function (event) {
            $Mouse.rcount++;
            if (typeof onRightClick === 'function')
                onRightClick(event.offsetX, event.offsetY, event);
        }, false);
        window.addEventListener('keypress', function (event) {
            if (typeof onKeyPress === 'function')
                onKeyPress(event.keyCode, event);
        }, false);

        window.addEventListener('keydown', function (event) {
            if (typeof onKeyDown === 'function')
                onKeyDown(event.keyCode, event);
        }, false);

        window.addEventListener('keyup', function (event) {
            if (typeof onKeyUp === 'function')
                onKeyUp(event.keyCode, event);
        }, false);
    }
}
// ======Прочее======//

JsMB.__preinit();
Object.assign(window, JsMB);
__init();

debug('// ======Инициализация завершена======//', 'background:black;color: #00ff00;');

window.addEventListener('load', function () {
    _eventListeners();
    if (typeof Main === "function") Main(); //eslint-disable-line
    else throw new Error("В файле Autorun.bas должен быть хук Main()!");
    if (typeof Loop === "function") {
        if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = (window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (fnc) {
                return window.setTimeout(fnc, 1000 / 60);
            });
        }

        function $Loop() {
            window.requestAnimationFrame($Loop);
            Loop();
        }
        $Loop();
    }
});

debug('// ======Подключение модулей/библиотек======//', 'color:gray;');